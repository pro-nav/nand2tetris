// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

// Solution by @pro-nav

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        Not(in=instruction[15], out=OP);
        ALU(x=Dout, y=Yin, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, zr=ZRout, ng=NGout);
        
        And(a=instruction[15], b=instruction[4], out=Dload);
        DRegister(in=ALUout, load=Dload, out=Dout);
        
        Mux16(a=instruction, b=ALUout, sel=instruction[15], out=Amux);
        Or(a=OP, b=instruction[5], out=Aload);
        ARegister(in=Amux, load=Aload, out=Aout);
        
        And(a=instruction[15], b=instruction[12], out=Ymux);
        Mux16(a=Aout, b=inM, sel=Ymux, out=Yin);
        
        //writeM
        And(a=instruction[15], b=instruction[3], out=writeM);
        
        //addressM
        And16(a=Aout, b=true, out[0..14]=addressM);
        
        //load bit selection
            Not(in=instruction[0], out=ni0);
            Not(in=instruction[1], out=ni1);
            Not(in=instruction[2], out=ni2);
            Not(in=ZRout, out=Nzr);
            Not(in=NGout, out=Nng);
            //jmp
            And(a=instruction[1], b=instruction[2], out=jmp1);
            And(a=jmp1, b=instruction[0], out=jmp);
            //jle
            Or(a=ZRout, b=NGout, out=zrORng);
            And(a=instruction[2], b=instruction[1], out=jle1);
            And(a=ni0, b=zrORng, out=jle2);
            And(a=jle1, b=jle2, out=jle);
            //jne
            And(a=instruction[2], b=instruction[0], out=jne1);
            And(a=ni1, b=Nzr, out=jne2);
            And(a=jne1, b=jne2, out=jne);
            //jlt
            And(a=instruction[2], b=NGout, out=jlt1);
            And(a=ni1, b=ni0, out=jlt2);
            And(a=jlt1, b=jlt2, out=jlt);
            //jeq
            And(a=ni2, b=ni0, out=jeq1);
            And(a=instruction[1], b=ZRout, out=jeq2);
            And(a=jeq1, b=jeq2, out=jeq);
            //jgt
            And(a=Nzr, b=Nng, out=nor1);
            And(a=ni2, b=ni1, out=jgt1);
            And(a=instruction[0], b=nor1, out=jgt2);
            And(a=jgt1, b=jgt2, out=jgt);
            //jge
            Or(a=ZRout, b=Nng, out=nor);
            And(a=instruction[1], b=instruction[0], out=jge1);
            And(a=ni2, b=nor, out=jge2);
            And(a=jge1, b=jge2, out=jge);
        
        Or8Way(in[0]=jmp, in[1]=jle, in[2]=jne, in[3]=jne, in[4]=jlt, in[5]=jeq, in[6]=jgt, in[7]=jge, out=pload);
        Or(a=instruction[0], b=instruction[1], out=o1);
        Or(a=o1, b=instruction[2], out=pout);
        And(a=pout, b=pload, out=load1);
        And(a=instruction[15], b=load1, out=load);
        PC(in=Aout, load=load, inc=true, reset=reset, out[0..14]=pc);

        And16(a=ALUout, b=true, out=outM);
        
}